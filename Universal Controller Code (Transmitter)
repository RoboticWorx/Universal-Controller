#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <esp_now.h>
#include <WiFi.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

const int I2C_SDA = 3;
const int I2C_SCL = 2;

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

uint8_t broadcastAddress[] = {0x68, 0xB6, 0xB3, 0x2A, 0xA3, 0x14}; // Reciever MAC Address (CHANGE TO YOUR OWN)

typedef struct struct_message { // Data structure to hold the data being sent wireless
  int a; // Pot1
  int b; // Pot2
  int c; // J1X
  int d; // J1Y
  int e; // J2X
  int f; // J2Y
  int g; // Button number
} struct_message;

struct_message dataSent;

esp_now_peer_info_t peerInfo;

const int pot1Pin = 9;
const int pot2Pin = 10;
const int j1xPin = 5;
const int j1yPin = 6;
const int j2xPin = 7;
const int j2yPin = 8;

const int alpha = 38;
const int beta = 47;
const int gamm_a = 12;
const int delta = 14;
const int epsilon = 13;
const int theta = 11;

const int whole = 35;
const int half = 36;
const int quarter = 37;
const int eighth = 15;

const int spade = 16;
const int heart = 18;
const int diamond = 17;
const int club = 21;

int buttons[14] = {alpha, beta, gamm_a, delta, epsilon, theta, whole, half, quarter, eighth, spade, heart, diamond, club}; // Array of buttons

const int lowLedPin = 48;

const int batteryPin = 1;
int batteryLevel = 100;
unsigned long previousMillis = 0; 

static const uint8_t logo_img[1024] = { // Logo on startup
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x03, 0xfc, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xfc, 0x00, 0x20, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0xfc, 0x00, 0x78, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0xfc, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x03, 0xf0, 0x01, 0xfc, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x0f, 0xf0, 0x01, 0xfc, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x1f, 0xe0, 0x03, 0xfc, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 0xff, 0xc0, 0x07, 0xfc, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0xff, 0x80, 0x07, 0xfc, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0xfe, 0x00, 0x0f, 0xfc, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0xfc, 0x00, 0x1f, 0xfc, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0xf8, 0x00, 0x1f, 0xfc, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x0f, 0xfc, 0x00, 0x3f, 0xfe, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x78, 0x01, 0xfe, 0x00, 0x3f, 0x7e, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0xff, 0x00, 0x7e, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x7f, 0x80, 0xfe, 0x3f, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x3f, 0xc0, 0xfc, 0x1f, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x1f, 0xe1, 0xf8, 0x1f, 0x80, 0x7c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x0f, 0xfb, 0xf8, 0x0f, 0x80, 0xfc, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x07, 0xff, 0xf0, 0x0f, 0xc1, 0xf8, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x03, 0xff, 0xf0, 0x07, 0xc3, 0xf8, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x01, 0xff, 0xe0, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0xff, 0xc0, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x7f, 0xc0, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x1f, 0x80, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x0f, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {

  WiFi.mode(WIFI_STA); // Initialize Wi-Fi

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_register_send_cb(callData); // Check the status of the data being sent

  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  
  if (esp_now_add_peer(&peerInfo) != ESP_OK){ // Add peer
    // Can put failed to add peer msg here
    return;
  }

  // Initialize types of pin
  pinMode(batteryPin, INPUT); 
  pinMode(lowLedPin, OUTPUT);

  pinMode(pot1Pin, INPUT);
  pinMode(pot2Pin, INPUT);
  pinMode(j1xPin, INPUT);
  pinMode(j1yPin, INPUT);
  pinMode(j2xPin, INPUT);
  pinMode(j2yPin, INPUT);

  for (int i = 0; i < 14; i++) // Initialize all buttons as a input with a pull-down resistor to filter noise
    pinMode(buttons[i], INPUT_PULLDOWN);

  Wire.begin(I2C_SDA, I2C_SCL);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64 (OLED display)
    for(;;);
  }
  display.clearDisplay();
  display.drawBitmap(0, 0, logo_img, 128, 64, 1); // Draw logo
  display.display();
  delay(2000);
  display.clearDisplay();
  
}

void loop() 
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);

  display.setCursor(0, 23);
  display.print("Wi-Fi:");

  displayPots();
  displayJoysticks();


  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &dataSent, sizeof(dataSent)); // Send the data
  
  display.setCursor(0, 32);

  // Check if message was sent
  if (result == ESP_OK) {
    display.print("Msg Sent Successfully");
  }
  else {
    display.print("Send Failed.");
  }

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= 3000) // Only update battery level every three seconds
  {
    batteryLevel = analogRead(batteryPin);
    batteryLevel = map(batteryLevel, 2742, 3623, 0, 100);
    if (batteryLevel > 100)
      batteryLevel = 100;
    else if (batteryLevel < 1)
      batteryLevel = 1;
    if (batteryLevel < 35)
      digitalWrite(lowLedPin, HIGH); // lowLedPin is the low charge LED. (Below 35% means it's time to charge).
    else
      digitalWrite(lowLedPin, LOW);
    previousMillis = currentMillis;
  }
  displayButtons(buttons);
  displayBattery(batteryLevel);

  display.display(); 
}

void displayPots()
{
  int pot1Val = analogRead(pot1Pin);
  int pot2Val = analogRead(pot2Pin);
  pot1Val = map(pot1Val, 0, 4095, 0, 100);
  pot2Val = map(pot2Val, 0, 4095, 100, 0);

  display.setCursor(0, 2);
  
  display.print("Pot1:");
  display.println(pot1Val);
  display.print("Pot2:");
  display.println(pot2Val);

  dataSent.a = pot1Val;
  dataSent.b = pot2Val;
}

void displayJoysticks()
{
  int j1xVal = analogRead(j1xPin);
  int j1yVal = analogRead(j1yPin);
  int j2xVal = analogRead(j2xPin);
  int j2yVal = analogRead(j2yPin);

  if (j1xVal > 2000)
    j1xVal = -1;
  else if (j1xVal < 1900)
    j1xVal = 1;
  else 
    j1xVal = 0;

  if (j2xVal > 2000)
    j2xVal = 1;
  else if (j2xVal < 1900)
    j2xVal = -1;
  else 
    j2xVal = 0;

  if (j1yVal > 2000)
    j1yVal = 1;
  else if (j1yVal < 1900)
    j1yVal = -1;
  else 
    j1yVal = 0;

  if (j2yVal > 2000)
    j2yVal = -1;
  else if (j2yVal < 1900)
    j2yVal = 1;
  else 
    j2yVal = 0;

  display.setCursor(50, 2);
  display.print("J1X:");
  display.print(j1xVal);

  display.setCursor(50, 10);
  display.print("J2X:");
  display.println(j2xVal);

  display.setCursor(90, 2);
  display.print("J1Y:");
  display.print(j1yVal);

  display.setCursor(90, 10);
  display.print("J2Y:");
  display.println(j2yVal);

  dataSent.c = j1xVal;
  dataSent.d = j1yVal;
  dataSent.e = j2xVal;
  dataSent.f = j2yVal;
}

void displayBattery(int batteryLevel)
{
  display.setCursor(51, 54);
  display.print("Battery: ");
  display.setCursor(101, 54);
  display.print(batteryLevel);
  display.setCursor(120, 54);
  display.print("%");
}

void displayButtons(int buttons[14])
{
  for (int i = 0; i < 14; i++) 
  {
    if (digitalRead(buttons[i]) == HIGH)
    {
      display.setCursor(0, 54);
      display.print("B:");
      display.setCursor(13, 54);
      display.print(buttons[i]);
      dataSent.g = buttons[i];
    }
  }
}

void callData(const uint8_t *mac_addr, esp_now_send_status_t status) 
{
  display.setCursor(0, 41);
  if (status == ESP_NOW_SEND_SUCCESS)
    display.print("Delivery:Successful");
  else
    display.print("Delivery:Failed");
}
